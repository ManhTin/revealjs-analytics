datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  presentations Presentation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Presentation {
  id          String   @id @default(cuid())
  userId      String
  url         String   @unique
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  presentationViews LogPresentationView[]
  mediaActions      LogMediaAction[]
  quizActions       LogQuizAction[]
  linkActions       LogLinkAction[]
  slideViews        LogSlideView[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([title])
}

enum MediaActionType {
  PLAY
  PAUSE
}

enum QuizActionType {
  START
  COMPLETE
}

enum LinkType {
  INTERNAL
  EXTERNAL
}

model LogPresentationView {
  id              String   @id @default(cuid())
  presentationId  String
  timestamp       DateTime @default(now())
  presentationUrl String
  totaldwellTime  Int

  presentation    Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([presentationId, timestamp])
  @@index([presentationId])
}

model LogMediaAction {
  id              String          @id @default(cuid())
  presentationId  String
  timestamp       DateTime        @default(now())
  presentationUrl String
  mediaId         String
  mediaSource     String
  actionType      MediaActionType
  currentTime     Int
  duration        Int
  progress        Float

  presentation    Presentation   @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([presentationId, timestamp])
  @@index([presentationId])
  @@index([mediaId])
}

model LogQuizAction {
  id                String          @id @default(cuid())
  presentationId    String
  timestamp         DateTime        @default(now())
  presentationUrl   String
  actionType        QuizActionType
  quizId            String
  quizname          String
  numberOfQuestions Int
  completed         Boolean
  score             Float
  dwellTime         Int

  presentation      Presentation   @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([presentationId, timestamp])
  @@index([presentationId])
  @@index([quizId])
}

model LogLinkAction {
  id              String    @id @default(cuid())
  presentationId  String
  timestamp       DateTime  @default(now())
  presentationUrl String
  linkType        LinkType
  linkUrl         String
  linkText        String

  presentation    Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([presentationId, timestamp])
  @@index([presentationId])
}

model LogSlideView {
  id              String   @id @default(cuid())
  presentationId  String
  timestamp       DateTime @default(now())
  presentationUrl String
  dwellTime       Int

  presentation    Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)

  @@index([presentationId, timestamp])
  @@index([presentationId])
}